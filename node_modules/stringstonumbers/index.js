(function (root, factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory);
  } else if (typeof module === "object" && module.exports) {
    module.exports = factory();
  } else {
    root.strToNum = factory();
  }
})(this, function () {
  const chars =
    "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%()*+,-./\\:;=?@[]^_`{|}~\"'&<> ";
  function encode(s = "") {
    const chars =
      "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%()*+,-./\\:;=?@[]^_`{|}~\"'&<> ";
    let r = "";
    for (let l of String(s)) {
      if (chars.indexOf(l) < 0) {
        r += String(chars.length + 1);
        continue;
      }
      r +=
        chars.indexOf(l) + 1 < 10
          ? `0${chars.indexOf(l) + 1}`
          : `${chars.indexOf(l) + 1}`;
    }
    return `${r}00`;
  }
  function decode(n, l = 0) {
    const chars =
      "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%()*+,-./\\:;=?@[]^_`{|}~\"'&<> ";
    let r = "";
    let t = String(n)
      .slice(l)
      .match(/[0-9][0-9]?/g);
    for (let c of t) {
      if (c === "00") {
        return r;
      }
      if (c > chars.length) {
        continue;
      }
      r += chars[c - 1];
    }
    return r;
  }

  let exports = {
    encode,
    decode
  };

  return exports;
});
